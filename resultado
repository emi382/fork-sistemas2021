Inspecting 36 files
.W.........C.........CC.C.C.CWWWWWWC

Offenses:

app.rb:4:1: C: Metrics/ClassLength: Class has too many lines. [171/100]
class App < Sinatra::Base ...
^^^^^^^^^^^^^^^^^^^^^^^^^
app.rb:38:5: W: Lint/UselessAssignment: Useless assignment to variable - question1. Did you mean questions?
    question1 = questions[it1]
    ^^^^^^^^^
app.rb:66:5: C: Naming/VariableName: Use snake_case for variable names.
    careerArray = Career.mapToCareerStruct
    ^^^^^^^^^^^
app.rb:67:31: C: Naming/VariableName: Use snake_case for variable names.
    Outcome.setWeightedValues(careerArray)
                              ^^^^^^^^^^^
app.rb:68:58: C: Naming/VariableName: Use snake_case for variable names.
    erb :finish, locals: { career: Career.bestCareerCalc(careerArray), careers: careerArray.sort_by do |career|
                                                         ^^^^^^^^^^^
app.rb:68:81: C: Naming/VariableName: Use snake_case for variable names.
    erb :finish, locals: { career: Career.bestCareerCalc(careerArray), careers: careerArray.sort_by do |career|
                                                                                ^^^^^^^^^^^
app.rb:78:7: W: Lint/Void: Literal [201, { 'Location' => "surveys/#{survey.survey_id}" }, 'Created'] used in void context.
      [201, { 'Location' => "surveys/#{survey.survey_id}" }, 'Created']
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app.rb:136:9: W: Lint/Void: Literal [201, { 'Location' => "questions/#{question.question_id}" }, 'Created'] used in void context.
        [201, { 'Location' => "questions/#{question.question_id}" }, 'Created']
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app.rb:169:9: W: Lint/Void: Literal [201, { 'Location' => "outcomes/#{outcome.outcome_id}" }, 'Created'] used in void context.
        [201, { 'Location' => "outcomes/#{outcome.outcome_id}" }, 'Created']
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app.rb:181:72: W: Lint/UselessAssignment: Useless assignment to variable - question.
                                                             question: question = Question.find(choice_id: outcome.choice_id) }
                                                                       ^^^^^^^^
app.rb:181:121: C: Layout/LineLength: Line is too long. [127/120]
                                                             question: question = Question.find(choice_id: outcome.choice_id) }
                                                                                                                        ^^^^^^^
app.rb:197:121: C: Layout/LineLength: Line is too long. [121/120]
  # shows the outcomes associated to the choice that is associated to a question. Also has create outcome functionalities
                                                                                                                        ^
app.rb:208:5: W: Lint/UselessAssignment: Useless assignment to variable - careers. Did you mean career?
    careers = Career.all
    ^^^^^^^
app.rb:212:9: W: Lint/Void: Literal [201, { 'Location' => "careers/#{career.id}" }, 'Created'] used in void context.
        [201, { 'Location' => "careers/#{career.id}" }, 'Created']
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
db/migrations/000018_add_cascade_to_foreign_keys.rb:1:1: C: Metrics/BlockLength: Block has too many lines. [32/25]
Sequel.migration do ...
^^^^^^^^^^^^^^^^^^^
models/career.rb:7:12: C: Naming/MethodName: Use snake_case for method names.
  def self.mapToCareerStruct
           ^^^^^^^^^^^^^^^^^
models/career.rb:8:5: C: Naming/VariableName: Use snake_case for variable names.
    careerStruct = Struct.new(:career_id, :name, :acum)
    ^^^^^^^^^^^^
models/career.rb:10:5: C: Naming/VariableName: Use snake_case for variable names.
    careerArray = []
    ^^^^^^^^^^^
models/career.rb:13:7: C: Naming/VariableName: Use snake_case for variable names.
      careerArray[i] = careerStruct.new(career.career_id, career.name, 0)
      ^^^^^^^^^^^
models/career.rb:13:24: C: Naming/VariableName: Use snake_case for variable names.
      careerArray[i] = careerStruct.new(career.career_id, career.name, 0)
                       ^^^^^^^^^^^^
models/career.rb:16:5: C: Naming/VariableName: Use snake_case for variable names.
    careerArray
    ^^^^^^^^^^^
models/career.rb:19:121: C: Layout/LineLength: Line is too long. [131/120]
  # Given a careerArray with all its accumulators set, calculates which one has the highest acum value and returns the careerStruct
                                                                                                                        ^^^^^^^^^^^
models/career.rb:20:12: C: Naming/MethodName: Use snake_case for method names.
  def self.bestCareerCalc(carray)
           ^^^^^^^^^^^^^^
models/choice.rb:3:121: C: Layout/LineLength: Line is too long. [143/120]
  one_to_one :questions # in sequel, to setup a one to one relation, its needed to list it as many_to_one in the table that has the foreign key
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^
models/outcome.rb:17:12: C: Naming/MethodName: Use snake_case for method names.
  def self.setWeightedValues(cArray)
           ^^^^^^^^^^^^^^^^^
models/outcome.rb:17:30: C: Naming/MethodParameterName: Only use lowercase characters for method parameter.
  def self.setWeightedValues(cArray)
                             ^^^^^^
models/outcome.rb:17:30: C: Naming/VariableName: Use snake_case for variable names.
  def self.setWeightedValues(cArray)
                             ^^^^^^
models/outcome.rb:20:7: C: Naming/VariableName: Use snake_case for variable names.
      cArray.each do |k|
      ^^^^^^
models/question.rb:5:121: C: Layout/LineLength: Line is too long. [133/120]
  # this function checks that theres at least 2 questions, and that they're each associated to at least one career through an outcome
                                                                                                                        ^^^^^^^^^^^^^
models/survey.rb:5:3: C: Metrics/AbcSize: Assignment Branch Condition size for filterByDate is too high. [<7, 14, 7> 17.15/17]
  def self.filterByDate(startDate, finishDate) ...
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
models/survey.rb:5:3: C: Metrics/MethodLength: Method has too many lines. [13/10]
  def self.filterByDate(startDate, finishDate) ...
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
models/survey.rb:5:12: C: Naming/MethodName: Use snake_case for method names.
  def self.filterByDate(startDate, finishDate)
           ^^^^^^^^^^^^
models/survey.rb:5:25: C: Naming/MethodParameterName: Only use lowercase characters for method parameter.
  def self.filterByDate(startDate, finishDate)
                        ^^^^^^^^^
models/survey.rb:5:25: C: Naming/VariableName: Use snake_case for variable names.
  def self.filterByDate(startDate, finishDate)
                        ^^^^^^^^^
models/survey.rb:5:36: C: Naming/MethodParameterName: Only use lowercase characters for method parameter.
  def self.filterByDate(startDate, finishDate)
                                   ^^^^^^^^^^
models/survey.rb:5:36: C: Naming/VariableName: Use snake_case for variable names.
  def self.filterByDate(startDate, finishDate)
                                   ^^^^^^^^^^
models/survey.rb:6:5: C: Naming/VariableName: Use snake_case for variable names.
    surveyStruct = Struct.new(:career_id, :survey_id)
    ^^^^^^^^^^^^
models/survey.rb:8:5: C: Naming/VariableName: Use snake_case for variable names.
    surveyArray = []
    ^^^^^^^^^^^
models/survey.rb:11:34: C: Naming/VariableName: Use snake_case for variable names.
      next unless DateTime.parse(startDate) < DateTime.parse(finishDate)
                                 ^^^^^^^^^
models/survey.rb:11:62: C: Naming/VariableName: Use snake_case for variable names.
      next unless DateTime.parse(startDate) < DateTime.parse(finishDate)
                                                             ^^^^^^^^^^
models/survey.rb:13:55: C: Naming/VariableName: Use snake_case for variable names.
      next unless survey.created_at >= DateTime.parse(startDate) && survey.created_at <= DateTime.parse(finishDate).change(
                                                      ^^^^^^^^^
models/survey.rb:13:105: C: Naming/VariableName: Use snake_case for variable names.
      next unless survey.created_at >= DateTime.parse(startDate) && survey.created_at <= DateTime.parse(finishDate).change(
                                                                                                        ^^^^^^^^^^
models/survey.rb:13:121: C: Layout/LineLength: Line is too long. [123/120]
      next unless survey.created_at >= DateTime.parse(startDate) && survey.created_at <= DateTime.parse(finishDate).change(
                                                                                                                        ^^^
models/survey.rb:17:7: C: Naming/VariableName: Use snake_case for variable names.
      surveyArray[i] = surveyStruct.new(survey.career_id, survey.survey_id)
      ^^^^^^^^^^^
models/survey.rb:17:24: C: Naming/VariableName: Use snake_case for variable names.
      surveyArray[i] = surveyStruct.new(survey.career_id, survey.survey_id)
                       ^^^^^^^^^^^^
models/survey.rb:20:5: C: Naming/VariableName: Use snake_case for variable names.
    surveyArray
    ^^^^^^^^^^^
models/survey.rb:24:12: C: Naming/MethodName: Use snake_case for method names.
  def self.careerCount(surveys)
           ^^^^^^^^^^^
tests/models/careers_test.rb:5:19: W: Lint/Void: Variable TestCase used in void context.
  MiniTest::Unit::TestCase
                  ^^^^^^^^
tests/models/choices_test.rb:5:19: W: Lint/Void: Variable TestCase used in void context.
  MiniTest::Unit::TestCase
                  ^^^^^^^^
tests/models/outcomes_test.rb:5:19: W: Lint/Void: Variable TestCase used in void context.
  MiniTest::Unit::TestCase
                  ^^^^^^^^
tests/models/questions_test.rb:5:19: W: Lint/Void: Variable TestCase used in void context.
  MiniTest::Unit::TestCase
                  ^^^^^^^^
tests/models/questions_test.rb:9:5: W: Lint/UselessAssignment: Useless assignment to variable - choice.
    choice = Choice.create
    ^^^^^^
tests/models/responses_test.rb:5:19: W: Lint/Void: Variable TestCase used in void context.
  MiniTest::Unit::TestCase
                  ^^^^^^^^
tests/models/surveys_test.rb:5:19: W: Lint/Void: Variable TestCase used in void context.
  MiniTest::Unit::TestCase
                  ^^^^^^^^
tests/test_helper.rb:17:7: C: [Correctable] Style/ClassAndModuleChildren: Use nested module/class definitions instead of compact style.
class Minitest::HooksSpec
      ^^^^^^^^^^^^^^^^^^^

36 files inspected, 55 offenses detected, 1 offense auto-correctable
